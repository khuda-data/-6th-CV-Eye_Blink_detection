# training
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=val_generator,
    callbacks=[
        ModelCheckpoint("mmodel.keras", monitor="val_accuracy", save_best_only=True, mode="max", verbose=1),
        ReduceLROnPlateau(monitor="val_accuracy", factor=0.2, patience=10, verbose=1, min_lr=1e-5)
    ]
)

# Visualization
def print_results(model_name, history, train_generator, val_generator, test_generator):

    # Train 및 Validation 성능
    train_loss, train_acc = model.evaluate(train_generator, verbose=0)
    val_loss, val_acc = model.evaluate(val_generator, verbose=0)

    # Test 성능
    test_loss, test_acc = model.evaluate(test_generator, verbose=0)

    # 결과 출력
    print(f"\n=== Results for {model_name} ===")
    print(f"Train Loss: {train_loss:.4f} | Train Accuracy: {train_acc:.4f}")
    print(f"Validation Loss: {val_loss:.4f} | Validation Accuracy: {val_acc:.4f}")
    print(f"Test Loss: {test_loss:.4f} | Test Accuracy: {test_acc:.4f}")

    # 그래프 출력
    plt.figure(figsize=(10, 6))
    plt.plot(history.history['loss'], label='Train Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.title(f'{model_name} Loss over Epochs')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    plt.grid()
    plt.show()

    plt.figure(figsize=(10, 6))
    plt.plot(history.history['accuracy'], label='Train Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.title(f'{model_name} Accuracy over Epochs')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()
    plt.grid()
    plt.show()
